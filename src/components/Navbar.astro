---
import Hamburger from '@/assets/hamburger.svg';
import Logo from '@/assets/logo.svg';
import basics from '@/data/basics';
import LocaleSelector from "./LocaleSelector.astro";
import type { Locale } from "@/i18n/constants";
import { useTranslations } from '@/i18n/helpers';
import ThemeDropdown from './theme/ThemeDropdown.astro';
import LinkIcon from '@lucide/astro/icons/link';

const locale = Astro.currentLocale as Locale | undefined;
const t = useTranslations(locale);

const menu = [
  {
    id: 'home',
    href: `/${locale}/#`,
    label: t('home')
  },
  {
    id: 'projects',
    href: `/${locale}/#projects`,
    label: t('projects')
  },
  {
    id: 'experience',
    href: `/${locale}/#experience`,
    label: t('portfolio.experience')
  },
];
---

<nav class="navbar" id="mainNavbar">
  <div class="navbar-container">
    <div class="navbar-bar">
      <a class="navbar-link-icon" href="/" title={'@' + basics.username}>
        <Logo class="size-5" />
        <span class="sr-only">@{basics.username}</span>
      </a>
    </div>
    <div class="navbar-bar static" id="mainMenu" popover="auto">
      {menu.map(item => (
        <a class="navbar-link" data-id={item.id} href={item.href}>{item.label}</a>
      ))}
    </div>
    <div class="flex gap-x-4">
      <div class="navbar-bar">
        <a class="navbar-link-icon" href={`/${locale}/links`} title="Links">
          <LinkIcon class="size-5" />
          <span class="sr-only">Links</span>
        </a>
        <LocaleSelector />
        <ThemeDropdown />
      </div>
      <div class="navbar-bar sm:!hidden">
        <button
          aria-label={t('navbar.toggleMenu')}
          class="navbar-link-icon"
          popovertarget="mainMenu"
        >
          <Hamburger class="size-5" />
        </button>
      </div>
    </div>
  </div>
</nav>

<script>
  function initScrollHandler() {
    const root = document.querySelector('main');
    if (!root) return;

    let sections: Map<Element, string> = new Map();
    for (let element of root.children) {
      if (element.id && element.tagName === "SECTION")
        sections.set(element, `#${element.id}`);
    }

    let visibleElements = new Set<Element>();

    const callback = (entries: IntersectionObserverEntry[]) => {
      for (let entry of entries) {
        if (entry.isIntersecting) {
          visibleElements.add(entry.target);
        } else {
          visibleElements.delete(entry.target);
        }
      }

      let firstVisibleSection = Array.from(sections.entries()).find(([element]) => visibleElements.has(element));
      if (!firstVisibleSection) return;
      document.querySelectorAll('#mainMenu [data-id]').forEach(el => {
        el.classList.toggle('navbar-link-active', el.getAttribute('data-id') === firstVisibleSection[1].slice(1));
      });
    };

    const observer = new IntersectionObserver(callback, {
      rootMargin: "-24px 0px",
    });

    Array.from(sections.keys()).forEach((element) => observer.observe(element));
  }

  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('#mainMenu .navbar-link').forEach(el => {
      el.addEventListener('click', () => {
        document.getElementById('mainMenu')?.hidePopover();
      });
    });
    initScrollHandler();
  });
</script>

<style is:global>
  @reference '@/styles/global.css';

  .navbar {
    @apply sticky top-0 inset-x-0 z-10 py-2 px-3 overflow-x-clip;
  }

  .navbar-container {
    @apply flex items-center justify-between gap-4;
  }

  .navbar-bar {
    @apply flex items-center justify-center p-1 gap-0.5 rounded-full bg-background/75 backdrop-blur-xs border border-body/10 shadow-sm;
  }

  .navbar-link {
    @apply font-semibold h-10 content-center px-5 rounded-full transition text-body hover:bg-body/5;
  }

  .navbar-link-icon {
    @apply rounded-full p-2.5 text-body transition hover:bg-body/5;
  }

  .navbar-link-active {
    @apply bg-primary/10 text-primary hover:bg-primary/10;
  }

  @media (width < 40rem) {
    #mainMenu {
      @apply fixed top-16 right-2.5 inset-auto z-10 items-stretch rounded-3xl flex-col;
      @apply motion-safe:transition-all transition-discrete duration-300;
      &:not(:popover-open) {
        display: none;
        translate: calc(100% + var(--spacing) * 16);
      }
      @starting-style {
        &:popover-open {
          translate: calc(100% + var(--spacing) * 16);
        }
      }
    }
  }

  /* Source: https://uxdesign.cc/the-menu-210bec7ad80c */
  .line {
    fill: none;
    stroke: currentColor;
    stroke-width: 8;
    @apply motion-safe:transition-[stroke-dasharray,stroke-dashoffset] duration-300;
  }
  .line1 {
    stroke-dasharray: 60 207;
    stroke-width: 8;
  }
  .line2 {
    stroke-dasharray: 60 60;
    stroke-width: 8;
  }
  .line3 {
    stroke-dasharray: 60 207;
    stroke-width: 8;
  }

  body:has(#mainMenu:popover-open) {
    .line1 {
      stroke-dasharray: 90 207;
      stroke-dashoffset: -134;
      stroke-width: 8;
    }
    .line2 {
      stroke-dasharray: 1 60;
      stroke-dashoffset: -30;
      stroke-width: 8;
    }
    .line3 {
      stroke-dasharray: 90 207;
      stroke-dashoffset: -134;
      stroke-width: 8;
    }
  }
</style>
